<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ScreenGeneratorConfiguration">
    <option name="settings">
      <Settings>
        <option name="categories">
          <list>
            <Category>
              <option name="id" value="2" />
              <option name="name" value="Fragment MVVM" />
            </Category>
          </list>
        </option>
        <option name="screenElements">
          <list>
            <ScreenElement>
              <option name="categoryId" value="2" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Contract" />
              <option name="template" value="package %packageName%&#10;&#10;import androidx.lifecycle.MutableLiveData&#10;&#10;interface %screenName%%screenElement% {&#10;&#10;    interface View {&#10;&#10;    }&#10;&#10;    interface DataManager {&#10;    }&#10;&#10;    interface ViewModel {&#10;        fun initialize()&#10;        fun getState(): MutableLiveData&lt;%screenName%States&gt;&#10;    }&#10;&#10;    interface Service {&#10;    }&#10;&#10;    interface Persistence {&#10;    }&#10;}&#10;" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="2" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Fragment" />
              <option name="template" value="package %packageName%&#10;&#10;import androidx.fragment.app.viewModels&#10;import com.fivestudents.R&#10;import com.fivestudents.base.Base%screenElement%&#10;import com.fivestudents.databinding.%screenElement%%screenName%Binding&#10;import com.fivestudents.module.home.activity.viewmodel.HomeViewModel&#10;import com.fivestudents.utils.obtainViewModel&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class %screenName%%screenElement% : Base%screenElement%() {&#10;&#10;    companion object {&#10;        fun getInstance(): %screenName%%screenElement% {&#10;            return %screenName%%screenElement%()&#10;        }&#10;    }&#10;    &#10;    private lateinit var mBinding: %screenElement%%screenName%Binding&#10;    private val fragmentVM: %screenName%ViewModel by viewModels()&#10;&#10;    // TODO: Replace with parent VM&#10;    private val homeVM: HomeViewModel by lazy {&#10;        obtainViewModel(requireActivity(), HomeViewModel::class.java, defaultViewModelProviderFactory)&#10;    }&#10;&#10;    override fun initialiseViews() {&#10;        mBinding = mViewDataBinding as %screenElement%%screenName%Binding&#10;        fragmentVM.initialize()&#10;    }&#10;&#10;    override fun getPageName(): Int {&#10;        // TODO: Return Actual Screen Title&#10;        return 0&#10;    }&#10;&#10;    override fun getLayout(): Int {&#10;        return R.layout.fragment_%screenNameSnakeCase%&#10;    }&#10;&#10;    override fun bindViewModelsWithViews() {&#10;        mBinding.apply {&#10;            this.lifecycleOwner = this@%screenName%%screenElement%&#10;            %screenNameLowerCase%VM = fragmentVM&#10;        }&#10;    }&#10;&#10;    override fun initViewModelObservers() {&#10;        fragmentVM.getState().observe(this@%screenName%%screenElement%, {&#10;            it?.let {&#10;                when {&#10;                    it.isLoading -&gt; {&#10;                    }&#10;                    it.isError -&gt; {&#10;                    }&#10;                }&#10;            }&#10;        })&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="2" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="States" />
              <option name="template" value="package %packageName%&#10;&#10;data class %screenName%%screenElement%(&#10;    val isLoading: Boolean = false,&#10;    val isError: Boolean = false,&#10;    val errorMessage: String = &quot;&quot;&#10;)&#10;" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="2" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="ViewModel" />
              <option name="template" value="package %packageName%&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.MutableLiveData&#10;import com.fivestudents.base.Base%screenElement%&#10;import %packageName%.repository.%screenName%DataManager&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class %screenName%%screenElement% @Inject constructor(&#10;    val dataManager: %screenName%DataManager,&#10;    val context: Application&#10;) : BaseViewModel(context), %screenName%Contract.%screenElement% {&#10;    private val viewState = MutableLiveData(%screenName%States())&#10;&#10;    override fun initialize() {&#10;&#10;    }&#10;&#10;    override fun getState() = viewState&#10;}&#10;" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="2" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="DataManager" />
              <option name="subdirectory" value="repository" />
              <option name="template" value="package %packageName%.repository&#10;&#10;import %packageName%.%screenName%Contract&#10;import javax.inject.Inject&#10;&#10;class %screenName%%screenElement% @Inject constructor(&#10;    val service: %screenName%Service,&#10;    val persistence: %screenName%Persistence&#10;) : %screenName%Contract.%screenElement% {&#10;&#10;}&#10;" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="2" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Persistence" />
              <option name="subdirectory" value="repository" />
              <option name="template" value="package %packageName%.repository&#10;&#10;import android.content.Context&#10;import %packageName%.%screenName%Contract&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import javax.inject.Inject&#10;&#10;class %screenName%%screenElement% @Inject constructor(&#10;    @ApplicationContext var context: Context&#10;) : %screenName%Contract.%screenElement% {&#10;&#10;}&#10;" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="2" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Service" />
              <option name="subdirectory" value="repository" />
              <option name="template" value="package %packageName%.repository&#10;&#10;import android.content.Context&#10;import %packageName%.%screenName%Contract&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import javax.inject.Inject&#10;&#10;class %screenName%%screenElement% @Inject constructor(&#10;    @ApplicationContext var context: Context&#10;) : %screenName%Contract.%screenElement% {&#10;&#10;}&#10;" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="2" />
              <option name="fileNameTemplate" value="fragment_%screenNameSnakeCase%" />
              <option name="fileType" value="Layout XML" />
              <option name="name" value="Layout" />
              <option name="template" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;  &lt;data&gt;&#10;&#10;    &lt;variable&#10;      name=&quot;%screenNameLowerCase%VM&quot;&#10;      type=&quot;%packageName%.%screenName%ViewModel&quot; /&gt;&#10;  &lt;/data&gt;&#10;&#10;  &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;  &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;" />
            </ScreenElement>
          </list>
        </option>
      </Settings>
    </option>
  </component>
</project>